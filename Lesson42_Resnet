import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.utils.data.dataloader as Dataloader
import torchvision.datasets as datasets
import torchvision.transforms as transforms
import torch.optim as optim


class ResBlk(nn.Module):
    """
        resnet blok
    """

    def __init__(self, ch_in, ch_out, stride=1):
        """
        :param ch_in:
        :param ch_out:
        """
        super(ResBlk, self).__init__()
        # 因为随着chanel数增多，如果h,w数不变，则参数量会很大，所以，增加chanel，减少h,w
        # conv1 stride=stride，，conv2 stride=1， shortcut分支也做同样的stride
        self.conv1 = nn.Conv2d(ch_in, ch_out, kernel_size=3, stride=stride, padding=1)
        self.bn1 = nn.BatchNorm2d(ch_out)
        self.conv2 = nn.Conv2d(ch_out, ch_out, kernel_size=3, stride=1, padding=1)
        self.bn2 = nn.BatchNorm2d(ch_out)

        self.extra = nn.Sequential()
        if ch_out != ch_in:
            # [b, ch_in, h w] ===>[b, ch_out, h, w]
            self.extra = nn.Sequential(
                nn.Conv2d(ch_in, ch_out, kernel_size=1, stride=stride),
                nn.BatchNorm2d(ch_out)
            )

    def forward(self, x):
        """
        :param x: [b,ch,h,w]
        :return:
        """

        out = F.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        # shortcut.
        # extra module:[b,ch_in,h,w] => [b,ch_out,h,w]
        # element-wise add:
        out = self.extra(x) + out

        return out


class ResNet18(nn.Module):

    def __init__(self):
        super(ResNet18, self).__init__()
# 图片chanel为3，输出为64chanel
        self.conv1 = nn.Sequential(
            nn.Conv2d(3, 64, kernel_size=3, stride=3, padding=0),
            nn.BatchNorm2d(64)
        )
        # followed 4 block, 每次h,w减半而chanel增加
        # [b,64,h,w] => [b,128,h,w]
        self.blk1 = ResBlk(64, 128, stride=2)
        # [b,16,h,w] => [b,32,h,w]
        self.blk2 = ResBlk(128, 256, stride=2)
        # [b,32,h,w] => [b,64,h,w]
        self.blk3 = ResBlk(256, 512, stride=2)
        # [b,64,h,w] => [b,128,h,w]
        self.blk4 = ResBlk(512, 512, stride=2)

        # 全连接层 (ch_in, ch_out) ch_in=chanel*h*w
        self.outlayer = nn.Linear(512*1*1, 10)

    def forward(self, x):
        """
        :param x:
        :return:
        """
        x = F.relu(self.conv1(x))
        # print('x after pre:', x.shape)       # torch.Size([2, 64, 10, 10])
        # [b,16,h,w] => [b,1024,h,w]
        x = self.blk1(x)                       # torch.Size([2, 128, 5, 5])
        x = self.blk2(x)                       # torch.Size([2, 256, 3, 3])
        x = self.blk3(x)                       # torch.Size([2, 512, 2, 2])
        x = self.blk4(x)                       # torch.Size([2, 512, 2, 2])
        # print('after conv:', x.shape)        # torch.Size([2, 512, 2, 2])
        # [b,c,h,w] => [b,c,1*1] 将h*w个像素点取平均 为1个点
        x = F.adaptive_avg_pool2d(x, [1, 1])   # torch.Size([2, 512, 1, 1])
        print('after adaptive_avg_pool:', x.shape)
        # 打平为: [b,c*h*w]
        x = x.view(x.size(0), -1)              # torch.Size([2, 512])
        x = self.outlayer(x)

        return x


def main():
    # [2,64,32,32] => [2,32,16,16]
    blk = ResBlk(64, 32, stride=2)     # 加入stride，实现h,w的衰减
    tmp = torch.randn(2, 64, 32, 32)
    out = blk(tmp)

    print('out1', out.size(), out)      # torch.Size([2, 32, 16, 16]

    # [2,3,32,32] => [2,32,16,16]
    x = torch.randn(2, 3, 32, 32)
    model = ResNet18()
    out = model(x)
    # [b,10]
    print('out2:', out.shape, out)     # torch.Size([2, 10])


if __name__ == '__main__':
    main()
